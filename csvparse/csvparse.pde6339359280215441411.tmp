Table in, out, z, inZ;

String file = "image1a";

float maxX = 0, maxY = 0, maxZ;
float minX = MAX_FLOAT, minY = MAX_FLOAT, minZ = MAX_FLOAT;
int x = 0, y = 0;

PImage a, im;

void setup() {
  size(1,1);
  surface.setResizable(true);
  

  a = loadImage("image1a.JPG");
  im = loadImage("image.jpg");
  
  surface.setSize(a.width / 2, a.height / 2);
  
  
  in = loadTable(file + ".csv");
  out = new Table();
  inZ = loadTable("depthtest.csv");
  z = new Table();
  z();

  for (int r = 0; r < in.getRowCount(); r +=2) {
    for (int c = 0; c < in.getColumnCount(); c++) {
      if (in.getFloat(r + 1, c) > maxX) {
        maxX = in.getFloat(r + 1, c);
      }
      if (in.getFloat(r, c) > maxY) {
        maxY = in.getFloat(r, c);
      }
      if (in.getFloat(r + 1, c) < minX) {
        minX = in.getFloat(r + 1, c);
      }
      if (in.getFloat(r, c) < minY) {
        minY = in.getFloat(r, c);
      }
    }
  }
  

  for (int i = 0; i < in.getColumnCount(); i++) {
    out.addColumn();
  }

  int outRow = 0;

  for (int r = 0; r < in.getRowCount(); r += 2) {
    out.addRow();
    out.addRow();
    out.addRow();
    for (int c = 0; c < in.getColumnCount(); c++) {
      out.setFloat(outRow, c, map(in.getFloat(r + 1, c), minX, maxX, 1, -1));
      out.setFloat(outRow + 1, c, map(in.getFloat(r, c), minY, maxY, 1.1, -3));
      out.setFloat(outRow + 2, c, checkz(in.getFloat(r + 1, c), in.getFloat(r, c)));
      //out.setFloat(outRow + 2, c, 1.2);
    }
    outRow += 3;
  }
  
  mapZ();

  println(in.getColumnCount(), in.getRowCount());
  println(out.getColumnCount(), out.getRowCount());

  

  saveTable(out, file + "zz.csv");
}

void z() {

  x = inZ.getRowCount()-1;
  y = inZ.getColumnCount()-1;

  print(x, y);

  for (int c = 0; c < inZ.getColumnCount(); c++) {
    z.addColumn();
  }
  
  for (int r = 0; r < inZ.getRowCount(); r++) {
    z.addRow();
    for (int c = 0; c < inZ.getColumnCount(); c++) {
      z.setFloat(r, c, inZ.getFloat(r, c));
    }
  }
}

float checkz(float x, float y){
  x = map(x, 0, a.width, 400, (1290 + 400));
  //x = map(x, 0, a.width, 445, (1290 + 400) - 55);
  y = map(y, 0, a.height, 129, (869 + 129)) + 13;
  x = map(x, 400, (1290 + 400), 0, z.getColumnCount());
  y = map(y, 129, (869 + 129), 0, z.getRowCount());
  
  if(x < z.getRowCount() / 2) x = ceil(x);
  else x = floor(x);
  y = floor(y);
  
  
  //println(z.getFloat((int) x, (int) y));
  
  return z.getFloat((int) x, (int) y);
}
//1290, 869
//400, 129




void mapZ(){
  for (int r = 2; r < out.getRowCount(); r += 3) {
    for (int c = 0; c < out.getColumnCount(); c++) {
      if (out.getFloat(r, c) > maxZ) {
        maxZ = out.getFloat(r, c);
      }
      if (out.getFloat(r, c) < minZ) {
        minZ = out.getFloat(r, c);
      }
    }
  }
  
  println(minZ, maxZ);
  
  
  for (int r = 2; r < out.getRowCount(); r += 3) {
    for (int c = 0; c < out.getColumnCount(); c++) {
      out.setFloat(r, c, map(out.getFloat(r, c), minZ, maxZ, 1.1 + 1.0, 0.55 + 1.0));
    }
  }
}

void draw(){
  image(a, 0, 0, a.width / 3, a.height / 3);
  image(im, 0,0);
  stroke(255);
  for (int r = 0; r < in.getRowCount(); r += 2) {
    for (int c = 0; c < in.getColumnCount(); c++) {
      point(xmap(in.getFloat(r + 1, c)), ymap(in.getFloat(r, c)) + 13);
    }
  }
}

float xmap(float x){
  x = map(x, 0, a.width, 445, (1290 + 400) - 55);
  //x = map(x, 400, (1290 + 400), 0, z.getColumnCount());
  
  if(x < z.getRowCount() / 2) x = ceil(x);
  else x = floor(x);

  return x;
}

float ymap(float y){
  y = map(y, 0, a.height, 129, (869 + 129));
  //y = map(y, 129, (869 + 129), 0, z.getRowCount());
  
  y = ceil(y);
  
  return y;
}
